"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _signature = require("@verdaccio/signature");
var _utils = require("@verdaccio/utils");
var _pluginLoader = _interopRequireDefault(require("../lib/plugin-loader"));
var _authUtils = require("./auth-utils");
var _constants = require("./constants");
var _logger = require("./logger");
var _utils2 = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const debug = (0, _debug.default)('verdaccio:auth');
class Auth {
  constructor(config) {
    this.config = config;
    this.logger = _logger.logger;
    this.secret = config.secret;
    this.plugins = this._loadPlugin(config);
    this._applyDefaultPlugins();
  }
  _loadPlugin(config) {
    const pluginOptions = {
      config,
      logger: this.logger
    };
    let authConf = _objectSpread({}, config.auth);
    if (authConf !== null && authConf !== void 0 && authConf.htpasswd) {
      // special case for htpasswd plugin, the v6 version uses bcrypt by default
      // 5.x enforces crypt to avoid breaking changes, but is highly recommended using
      // bcrypt instead.
      if (!authConf.htpasswd.algorithm) {
        authConf.htpasswd.algorithm = 'crypt';
        this.logger.info(
        // eslint-disable-next-line max-len
        'the "crypt" algorithm is deprecated consider switch to "bcrypt" in the configuration file. Read the documentation for additional details');
      }
    }
    return (0, _pluginLoader.default)(config, authConf, pluginOptions, plugin => {
      const {
        authenticate,
        allow_access,
        allow_publish
      } = plugin;
      // @ts-ignore
      return authenticate || allow_access || allow_publish;
    });
  }
  _applyDefaultPlugins() {
    this.plugins.push((0, _authUtils.getDefaultPlugins)(this.logger));
  }
  changePassword(username, password,
  // pragma: allowlist secret
  newPassword,
  // pragma: allowlist secret
  cb) {
    const validPlugins = _lodash.default.filter(this.plugins, plugin => _lodash.default.isFunction(plugin.changePassword));
    if (_lodash.default.isEmpty(validPlugins)) {
      return cb(_utils2.ErrorCode.getInternalError(_constants.SUPPORT_ERRORS.PLUGIN_MISSING_INTERFACE));
    }
    for (const plugin of validPlugins) {
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.changePassword) === false) {
        debug('auth plugin does not implement changePassword, trying next one');
        continue;
      } else {
        debug('updating password for %o', username);
        plugin.changePassword(username, password, newPassword, (err, profile) => {
          if (err) {
            this.logger.error({
              username,
              err
            }, `An error has been produced
            updating the password for @{username}. Error: @{err.message}`);
            return cb(err);
          }
          this.logger.info({
            username
          }, 'updated password for @{username} was successful');
          return cb(null, profile);
        });
      }
    }
  }
  authenticate(username, password, cb) {
    const plugins = this.plugins.slice(0);
    const self = this;
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isFunction(plugin.authenticate) === false) {
        return next();
      }
      debug('authenticating %o', username);
      plugin.authenticate(username, password, function (err, groups) {
        if (err) {
          self.logger.error({
            username,
            err
          }, 'authenticating for user @{username} failed. Error: @{err.message}');
          return cb(err);
        }

        // Expect: SKIP if groups is falsey and not an array
        //         with at least one item (truthy length)
        // Expect: CONTINUE otherwise (will error if groups is not
        //         an array, but this is current behavior)
        // Caveat: STRING (if valid) will pass successfully
        //         bug give unexpected results
        // Info: Cannot use `== false to check falsey values`
        if (!!groups && groups.length !== 0) {
          // TODO: create a better understanding of expectations
          if (_lodash.default.isString(groups)) {
            throw new TypeError('plugin group error: invalid type for function');
          }
          const isGroupValid = _lodash.default.isArray(groups);
          if (!isGroupValid) {
            throw new TypeError(_constants.API_ERROR.BAD_FORMAT_USER_GROUP);
          }
          debug('authentication for user %o was successfully. Groups: %o', username, groups);
          return cb(err, (0, _config.createRemoteUser)(username, groups));
        }
        next();
      });
    })();
  }
  add_user(user, password, cb) {
    const self = this;
    const plugins = this.plugins.slice(0);
    debug('add user %o', user);
    (function next() {
      const plugin = plugins.shift();
      let method = 'adduser';
      if (_lodash.default.isFunction(plugin[method]) === false) {
        method = 'add_user';
        self.logger.warn('the plugin method add_user in the auth plugin is deprecated and will be removed in next major release, notify to the plugin author');
      }
      if (_lodash.default.isFunction(plugin[method]) === false) {
        next();
      } else {
        // p.add_user() execution
        plugin[method](user, password, function (err, ok) {
          if (err) {
            self.logger.error({
              user,
              err: err.message
            }, 'the user @{user} could not being added. Error: @{err}');
            return cb(err);
          }
          if (ok) {
            self.logger.info({
              user
            }, 'the user @{user} has been added');
            return self.authenticate(user, password, cb);
          }
          next();
        });
      }
    })();
  }

  /**
   * Allow user to access a package.
   */
  allow_access({
    packageName,
    packageVersion
  }, user, callback) {
    const plugins = this.plugins.slice(0);
    const self = this;
    const pkgAllowAcces = {
      name: packageName,
      version: packageVersion
    };
    const pkg = Object.assign({}, pkgAllowAcces, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow access for %o', packageName);
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_access) === false) {
        return next();
      }
      plugin.allow_access(user, pkg, function (err, ok) {
        if (err) {
          self.logger.error({
            packageName,
            err
          }, 'forbidden access for @{packageName}. Error: @{err.message}');
          return callback(err);
        }
        if (ok) {
          self.logger.info({
            packageName
          }, 'allowed access for @{packageName}');
          return callback(null, ok);
        }
        next(); // cb(null, false) causes next plugin to roll
      });
    })();
  }

  allow_unpublish({
    packageName,
    packageVersion
  }, user, callback) {
    const pkg = Object.assign({
      name: packageName,
      version: packageVersion
    }, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow unpublish for %o', packageName);
    for (const plugin of this.plugins) {
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_unpublish) === false) {
        debug('allow unpublish for %o plugin does not implement allow_unpublish', packageName);
        continue;
      } else {
        // @ts-ignore
        plugin.allow_unpublish(user, pkg, (err, ok) => {
          if (err) {
            this.logger.error({
              packageName,
              user: user === null || user === void 0 ? void 0 : user.name
            }, '@{user} forbidden publish for @{packageName}, it will fallback on unpublish permissions');
            return callback(err);
          }
          if (_lodash.default.isNil(ok) === true) {
            debug('we bypass unpublish for %o, publish will handle the access', packageName);
            // @ts-ignore
            // eslint-disable-next-line
            return this.allow_publish(...arguments);
          }
          if (ok) {
            this.logger.info({
              packageName,
              user: user === null || user === void 0 ? void 0 : user.name
            }, '@{user} allowed unpublish for @{packageName}');
            return callback(null, ok);
          }
        });
      }
    }
  }

  /**
   * Allow user to publish a package.
   */
  allow_publish({
    packageName,
    packageVersion
  }, user, callback) {
    const plugins = this.plugins.slice(0);
    const self = this;
    const pkg = Object.assign({
      name: packageName,
      version: packageVersion
    }, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow publish for %o init | plugins: %o', packageName, plugins === null || plugins === void 0 ? void 0 : plugins.length);
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_publish) === false) {
        debug('allow publish for %o plugin does not implement allow_publish', packageName);
        return next();
      }

      // @ts-ignore
      plugin.allow_publish(user, pkg, (err, ok) => {
        if (_lodash.default.isNil(err) === false && _lodash.default.isError(err)) {
          self.logger.error({
            packageName,
            user: user === null || user === void 0 ? void 0 : user.name
          }, '@{user} is forbidden publish for @{packageName}');
          return callback(err);
        }
        if (ok) {
          self.logger.info({
            packageName,
            user: user === null || user === void 0 ? void 0 : user.name
          }, '@{user} is allowed publish for @{packageName}');
          return callback(null, ok);
        }
        debug('allow publish skip validation for %o', packageName);
        next(); // cb(null, false) causes next plugin to roll
      });
    })();
  }

  apiJWTmiddleware() {
    const plugins = this.plugins.slice(0);
    const helpers = {
      createAnonymousRemoteUser: _config.createAnonymousRemoteUser,
      createRemoteUser: _config.createRemoteUser
    };
    for (const plugin of plugins) {
      if (plugin.apiJWTmiddleware) {
        return plugin.apiJWTmiddleware(helpers);
      }
    }
    return (req, res, _next) => {
      req.pause();
      const next = function (err) {
        req.resume();
        // uncomment this to reject users with bad auth headers
        // return _next.apply(null, arguments)
        // swallow error, user remains unauthorized
        // set remoteUserError to indicate that user was attempting authentication
        if (err) {
          req.remote_user.error = err.message;
        }
        return _next();
      };
      if (this._isRemoteUserValid(req.remote_user)) {
        // @ts-ignore
        return next();
      }

      // in case auth header does not exist we return anonymous function
      req.remote_user = (0, _config.createAnonymousRemoteUser)();
      const {
        authorization
      } = req.headers;
      if (_lodash.default.isNil(authorization)) {
        // @ts-ignore
        return next();
      }
      if (!(0, _authUtils.isAuthHeaderValid)(authorization)) {
        debug('api middleware auth heather is not valid');
        return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
      }
      const security = (0, _authUtils.getSecurity)(this.config);
      const {
        secret
      } = this.config;
      if ((0, _authUtils.isAESLegacy)(security)) {
        debug('api middleware using legacy auth token');
        this._handleAESMiddleware(req, security, secret, authorization, next);
      } else {
        debug('api middleware using JWT auth token');
        this._handleJWTAPIMiddleware(req, security, secret, authorization, next);
      }
    };
  }
  _handleJWTAPIMiddleware(req, security, secret, authorization, next) {
    const {
      scheme,
      token
    } = (0, _authUtils.parseAuthTokenHeader)(authorization);
    if (scheme.toUpperCase() === _constants.TOKEN_BASIC.toUpperCase()) {
      // this should happen when client tries to login with an existing user
      const credentials = (0, _utils2.convertPayloadToBase64)(token).toString();
      const {
        user,
        password
      } = (0, _authUtils.parseBasicPayload)(credentials);
      this.authenticate(user, password, (err, user) => {
        if (!err) {
          req.remote_user = user;
          next();
        } else {
          req.remote_user = (0, _config.createAnonymousRemoteUser)();
          next(err);
        }
      });
    } else {
      // jwt handler
      const credentials = (0, _authUtils.getMiddlewareCredentials)(security, secret, authorization);
      if (credentials) {
        // if the signature is valid we rely on it
        req.remote_user = credentials;
        next();
      } else {
        // with JWT throw 401
        next(_utils2.ErrorCode.getForbidden(_constants.API_ERROR.BAD_USERNAME_PASSWORD));
      }
    }
  }
  _handleAESMiddleware(req, security, secret, authorization, next) {
    const credentials = (0, _authUtils.getMiddlewareCredentials)(security, secret, authorization);
    if (credentials) {
      const {
        user,
        password
      } = credentials;
      this.authenticate(user, password, (err, user) => {
        if (!err) {
          req.remote_user = user;
          next();
        } else {
          req.remote_user = (0, _config.createAnonymousRemoteUser)();
          next(err);
        }
      });
    } else {
      // we force npm client to ask again with basic authentication
      return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
    }
  }
  _isRemoteUserValid(remote_user) {
    return _lodash.default.isUndefined(remote_user) === false && _lodash.default.isUndefined(remote_user.name) === false;
  }

  /**
   * JWT middleware for WebUI
   */
  webUIJWTmiddleware() {
    return (req, res, _next) => {
      if (this._isRemoteUserValid(req.remote_user)) {
        return _next();
      }
      req.pause();
      const next = err => {
        req.resume();
        if (err) {
          // req.remote_user.error = err.message;
          res.status(err.statusCode).send(err.message);
        }
        return _next();
      };
      const {
        authorization
      } = req.headers;
      if (_lodash.default.isNil(authorization)) {
        // @ts-ignore
        return next();
      }
      if (!(0, _authUtils.isAuthHeaderValid)(authorization)) {
        return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
      }
      const token = (authorization || '').replace(`${_constants.TOKEN_BEARER} `, '');
      if (!token) {
        // @ts-ignore
        return next();
      }
      let credentials;
      try {
        credentials = (0, _authUtils.verifyJWTPayload)(token, this.config.secret);
      } catch (err) {
        // FIXME: intended behaviour, do we want it?
      }
      if (this._isRemoteUserValid(credentials)) {
        const {
          name,
          groups
        } = credentials;
        req.remote_user = (0, _config.createRemoteUser)(name, groups);
      } else {
        req.remote_user = (0, _config.createAnonymousRemoteUser)();
      }
      // @ts-ignore
      next();
    };
  }
  async jwtEncrypt(user, signOptions) {
    const {
      real_groups,
      name,
      groups
    } = user;
    const realGroupsValidated = _lodash.default.isNil(real_groups) ? [] : real_groups;
    const groupedGroups = _lodash.default.isNil(groups) ? real_groups : Array.from(new Set([...groups.concat(realGroupsValidated)]));
    const payload = {
      real_groups: realGroupsValidated,
      name,
      groups: groupedGroups
    };
    const token = await (0, _signature.signPayload)(payload, this.secret, signOptions);
    return token;
  }

  /**
   * Encrypt a string.
   */
  aesEncrypt(buf) {
    return (0, _signature.aesEncryptDeprecated)(buf, this.secret);
  }
}
var _default = Auth;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,