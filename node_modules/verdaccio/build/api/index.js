"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.loadTheme = loadTheme;
var _compression = _interopRequireDefault(require("compression"));
var _cors = _interopRequireDefault(require("cors"));
var _express = _interopRequireDefault(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _middleware = require("@verdaccio/middleware");
var _search = require("@verdaccio/search");
var _auth = _interopRequireDefault(require("../lib/auth"));
var _config2 = _interopRequireDefault(require("../lib/config"));
var _constants = require("../lib/constants");
var _logger = require("../lib/logger");
var _pluginLoader = _interopRequireDefault(require("../lib/plugin-loader"));
var _storage = _interopRequireDefault(require("../lib/storage"));
var _utils = require("../lib/utils");
var _debug = _interopRequireDefault(require("./debug"));
var _endpoint = _interopRequireDefault(require("./endpoint"));
var _middleware2 = require("./middleware");
var _web = _interopRequireDefault(require("./web"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  version
} = require('../../package.json');
function loadTheme(config) {
  if (_lodash.default.isNil(config.theme) === false) {
    return _lodash.default.head((0, _pluginLoader.default)(config, config.theme, {}, function (plugin) {
      return plugin.staticPath && plugin.manifest && plugin.manifestFiles;
    }, 'verdaccio-theme'));
  }
}
const defineAPI = async function (config, storage) {
  var _config$server;
  const auth = new _auth.default(config);
  const app = (0, _express.default)();
  _search.SearchMemoryIndexer.configureStorage(storage);
  await _search.SearchMemoryIndexer.init();
  // run in production mode by default, just in case
  // it shouldn't make any difference anyway
  app.set('env', process.env.NODE_ENV || 'production');

  // Allow `req.ip` to resolve properly when Verdaccio is behind a proxy or load-balancer
  // See: https://expressjs.com/en/guide/behind-proxies.html
  if ((_config$server = config.server) !== null && _config$server !== void 0 && _config$server.trustProxy) {
    app.set('trust proxy', config.server.trustProxy);
  }
  app.use((0, _cors.default)());

  // // Router setup
  app.use((0, _middleware.log)(_logger.logger));
  app.use(_middleware2.errorReportingMiddleware);
  if (config.user_agent) {
    app.use(function (_req, res, next) {
      res.setHeader('X-Powered-By', (0, _config.getUserAgent)(config.user_agent));
      next();
    });
  } else {
    app.disable('x-powered-by');
  }
  app.use((0, _compression.default)());
  app.get('/-/static/favicon.ico', (0, _middleware2.serveFavicon)(config));

  // Hook for tests only
  if (config._debug) {
    (0, _debug.default)(app, config.configPath);
  }

  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const plugins = (0, _pluginLoader.default)(config, config.middlewares, plugin_params, function (plugin) {
    // @ts-ignore
    return plugin.register_middlewares;
  });
  plugins.forEach(plugin => {
    plugin.register_middlewares(app, auth, storage);
  });

  // // For  npm request
  app.use((0, _endpoint.default)(config, auth, storage));

  // For WebUI & WebUI API
  if (_lodash.default.get(config, 'web.enable', true)) {
    app.use((_req, res, next) => {
      res.locals.app_version = version !== null && version !== void 0 ? version : '';
      next();
    });
    app.use((0, _web.default)(config, auth, storage));
  } else {
    app.get('/', function (_, __, next) {
      next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.WEB_DISABLED));
    });
  }
  app.get('/*', function (_, __, next) {
    next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.FILE_NOT_FOUND));
  });
  app.use(_middleware2.handleError);
  app.use(_middleware.final);
  return app;
};
var _default = async function _default(configHash) {
  (0, _logger.setup)(configHash.logs);
  const config = new _config2.default(_lodash.default.cloneDeep(configHash));
  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const filters = (0, _pluginLoader.default)(config, config.filters || {}, plugin_params,
  // @ts-ignore
  plugin => plugin.filter_metadata);
  const storage = new _storage.default(config);
  // waits until init calls have been initialized
  await storage.init(config, filters);
  return await defineAPI(config, storage);
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,